using powerplant_coding_challenge.Model;

namespace powerplant_coding_challenge.Logic
{
    public static class Tools
    {
        // Set how much power each plant must generate and if it must be turned on
        public static void AffectLoadNeeded(IEnumerable<Powerplant> powerplants, int load)
        {
            var providedLoad = (double)0;
            var previousSelectedPowerplant = powerplants.FirstOrDefault();

            foreach (var powerplant in powerplants)
            {
                // Check if we need to add load to demanded value
                if (providedLoad < load)
                {
                    // We assume that sum of wind turbine power generation do not exceed the total needed load
                    // TODO: Take into account that wind power generation might exceed the needed load
                    if (powerplant.Type == PowerplantType.Windturbine)
                    {
                        providedLoad += powerplant.GeneratedPower;
                    }
                    else
                    {
                        var loadNeeded = load - providedLoad;

                        CheckLoadAndTurnOn(ref loadNeeded, ref providedLoad,powerplant, previousSelectedPowerplant);
                    }
                }
                // Keep power plant offline
                else
                {
                    powerplant.GeneratedPower = 0;
                }

                previousSelectedPowerplant = powerplant;
            }
        }

        // Checks if turning the powerplant on will exceed the demand and lowers the previous powerplants power generation
        // if it's the case
        static void CheckLoadAndTurnOn(ref double loadNeeded, ref double providedLoad, Powerplant powerplant, Powerplant previousSelectedPowerplant)
        {
            // If needed load is bigger than demand, turn it to the max
            if (loadNeeded >= powerplant.Pmax)
            {
                powerplant.GeneratedPower = powerplant.Pmax;
                providedLoad += powerplant.GeneratedPower;
            }
            else
            {
                // Check if turning on the next most efficient power plant will exceed demand
                if (loadNeeded < powerplant.Pmin)
                {
                    var powerDiff = powerplant.Pmin - loadNeeded;

                    // Lower power generation from previous powerplant
                    previousSelectedPowerplant.GeneratedPower -= powerDiff;
                    providedLoad -= powerDiff;

                    // Turn on the powerplant to minimum power generation
                    powerplant.GeneratedPower = powerplant.Pmin;
                    providedLoad += powerplant.GeneratedPower;
                }
                // Can turn on without exceeding demand
                else
                {
                    powerplant.GeneratedPower = loadNeeded;
                    providedLoad += powerplant.GeneratedPower;
                }
            }
        }

        // Calculate how much energy will be generated by the wind power plant
        static double CalculateWindPower(Powerplant powerplant, double windPower)
        {
            return powerplant.Pmax * (windPower / 100);
        }

        // Returns list of wind power plants that fits the load criteria 
        public static void GetTotalWindPower(List<Powerplant> powerplants, int load, double windPower)
        {
            var totalWindPower = (double)0;

            foreach (var powerplant in powerplants)
            {
                // We only check for wind turbine power plants
                if (powerplant.Type == PowerplantType.Windturbine && totalWindPower < load)
                {
                    var generatedPower = CalculateWindPower(powerplant, windPower);

                    // If turning on the wind turbine exceeds load, then keep it off
                    if (totalWindPower + generatedPower > load)
                        powerplant.GeneratedPower = 0;
                    else
                    {
                        powerplant.GeneratedPower = generatedPower;

                        totalWindPower += generatedPower;
                    }
                }
            }
        }

        // Calculate price to generate 1 MW/h
        public static void SetMWhCost(List<Powerplant> powerplants, Fuels fuels)
        {
            foreach (var powerplant in powerplants)
            {
                if (powerplant.Type == PowerplantType.Windturbine)
                {
                    powerplant.CostPerMWh = 0;
                }
                else
                {
                    powerplant.CostPerMWh = GetFuelCost(powerplant.Efficiency, powerplant.Type, fuels);
                }
            }
        }

        // Set cost of operation of each power plant
        static double GetFuelCost(double efficiency, PowerplantType type, Fuels fuels)
        {
            var fuelCost = (double)0;
            var costOfMWh = (double)0;

            if (type == PowerplantType.Turbojet)
            {
                fuelCost = fuels.Kerosine;
            }
            else
            {
                fuelCost = fuels.Gas;
            }

            costOfMWh = (1 / efficiency) * fuelCost;

            return costOfMWh;
        }
    }
}
