using powerplant_coding_challenge.Model;

namespace powerplant_coding_challenge.Logic
{
    public static class Tools
    {
        // Calculate how much energy will be generated by the wind power plant
        static double CalculateWindPower(Powerplant powerplant, double windPower)
        {
            return powerplant.Pmax * (windPower / 100);
        }

        // Returns list of wind power plants that fits the load criteria 
        public static void GetTotalWindPower(List<Powerplant> powerplants, int load, double windPower)
        {
            var totalWindPower = (double)0;
            var selectedPowerplants = new List<Powerplant>();

            foreach (var powerplant in powerplants)
            {
                if (powerplant.Type == PowerplantType.Windturbine && totalWindPower < load)
                {
                    var generatedPower = CalculateWindPower(powerplant, windPower);

                    powerplant.GeneratedPower = generatedPower;

                    // Rework as we might include power plant with 0 generated power
                    if (totalWindPower + generatedPower > load)
                        return;
                    else
                    {
                        selectedPowerplants.Add(powerplant);

                        totalWindPower += generatedPower;
                    }
                }
            }
        }

        // Calculate price to generate 1 MW/h
        public static void SetMWhCost(List<Powerplant> powerplants, Fuels fuels)
        {
            foreach (var powerplant in powerplants)
            {
                if (powerplant.Type == PowerplantType.Windturbine)
                {
                    powerplant.CostPerMWh = 0;
                }
                else
                {
                    powerplant.CostPerMWh = GetFuelCost(powerplant.Efficiency, powerplant.Type, fuels);
                }
            }
        }

        // Set cost of operation of each power plant
        static double GetFuelCost(double efficiency, PowerplantType type, Fuels fuels)
        {
            var fuelCost = (double)0;
            var costOfMWh = (double)0;

            if (type == PowerplantType.Turbojet)
            {
                fuelCost = fuels.Kerosine;
            }
            else
            {
                fuelCost = fuels.Gas;
            }

            costOfMWh = (1 / efficiency) * fuelCost;

            return costOfMWh;
        }
    }
}
